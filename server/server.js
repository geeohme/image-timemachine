import express from 'express';
import path from 'path';
import { GoogleGenAI, Modality } from "@google/genai";
import { fileURLToPath } from 'url';

// Basic setup
const app = express();
const port = process.env.PORT || 3000;
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- IMPORTANT ---
// API Key check. This is the only place the API key is accessed.
// It is read from the server's environment variables.
const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  console.error("FATAL ERROR: API_KEY environment variable not set.");
  process.exit(1); // Exit if no API key
}

// Initialize Gemini
const ai = new GoogleGenAI({ apiKey: API_KEY });

// Middleware
// Increase payload limit to handle large base64 image strings
app.use(express.json({ limit: '10mb' })); 
// Serve static files from the 'dist' directory
app.use(express.static(path.join(__dirname, '..', 'dist')));

// Helper function to extract base64 data from a data URL
const getBase64 = (dataUrl) => dataUrl.split(',')[1];

// API endpoint for general content generation (image or text)
app.post('/api/generate', async (req, res) => {
  const { prompt, imageDataUrl, imageMimeType, shouldGenerateImage } = req.body;

  if (!prompt || !imageDataUrl || !imageMimeType) {
    return res.status(400).json({ error: 'Missing required parameters.' });
  }

  try {
    const modelName = shouldGenerateImage ? 'gemini-2.5-flash-image' : 'gemini-2.5-flash';
    
    const imagePart = {
      inlineData: {
        data: getBase64(imageDataUrl),
        mimeType: imageMimeType,
      },
    };
    
    const textPart = { text: prompt };
    const contents = { parts: [imagePart, textPart] };

    const response = await ai.models.generateContent({
      model: modelName,
      contents,
      ...(shouldGenerateImage && {
        config: {
          responseModalities: [Modality.IMAGE],
        },
      }),
    });

    if (shouldGenerateImage) {
      const imagePart = response.candidates?.[0]?.content?.parts?.[0];
      if (imagePart && imagePart.inlineData) {
        const resultUrl = `data:${imagePart.inlineData.mimeType};base64,${imagePart.inlineData.data}`;
        res.json({ data: resultUrl });
      } else {
        throw new Error("No image was generated by the API.");
      }
    } else {
      res.json({ data: response.text });
    }
  } catch (error) {
    console.error("Error in /api/generate:", error);
    const errorMessage = error instanceof Error ? error.message : "An internal server error occurred.";
    res.status(500).json({ error: errorMessage });
  }
});

// API endpoint for generating custom scene prompts
app.post('/api/generate-prompt', async (req, res) => {
  const { shortDescription } = req.body;

  if (!shortDescription) {
    return res.status(400).json({ error: 'Missing shortDescription.' });
  }

  const prompt = `Create a detailed and vivid image generation prompt to place a person into a scene based on this short description: "${shortDescription}". The prompt should describe the setting, the person's attire, the lighting, and the overall artistic style. It should be suitable for an AI image generator that will insert a person from another photo into this new scene.`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: prompt,
    });
    res.json({ prompt: response.text });
  } catch (error) {
    console.error("Error in /api/generate-prompt:", error);
    const errorMessage = error instanceof Error ? error.message : "An internal server error occurred.";
    res.status(500).json({ error: errorMessage });
  }
});

// Fallback to serve the main HTML file for any other routes (supports SPA routing)
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'dist', 'index.html'));
});

app.listen(port, () => {
  console.log(`Server listening at http://localhost:${port}`);
});
